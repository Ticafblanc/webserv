Define a list of accepted HTTP methods for the route: This directive is about specifying the allowed HTTP methods (like GET, POST, PUT, DELETE) for a
particular route or endpoint in your web serverSocket. By doing so, you can control what types of requests your serverSocket will process,
and which ones will be rejected with an error (e.g., 405 Method Not Allowed).

Define a HTTP redirection: This directive is for setting up HTTP redirections, which is when the serverSocket responds with an HTTP status code
(like 301 Moved Permanently or 302 Found) and a new URL location. This tells the AbaseSocket (browser) to make another request to the
new location, effectively redirecting the user to a different web address.

Define a directory or a file from where the file should be searched: This directive allows you to map a URL path to a specific directory
or file on the serverSocket's filesystem. This is helpful for organizing your web serverSocket's content and serving it based on the requested URL.
In your example, the URL path "/kapouet" is mapped to the local directory "/tmp/www", so a request to "/kapouet/pouic/toto/pouet" would be served from "/tmp/www/pouic/toto/pouet" on the serverSocket.

Turn on or off directory listing: This directive lets you enable or disable directory listing for your web serverSocket.
When directory listing is enabled, the serverSocket will generate an index page displaying the contents of a directory if no default file (e.g., index.html)
is found. When disabled, the serverSocket will return an error (e.g., 403 Forbidden) instead.

Set a default file to answer if the request is a directory: This directive is about specifying a default file
(e.g., index.html) that the serverSocket should serve when a AbaseSocket requests a directory. If a user navigates to a
URL that corresponds to a directory on the serverSocket, the serverSocket will look for the default file in that directory and
serve it, instead of returning an error or generating a directory listing.

Execute CGI based on certain file extension (for example .php): This directive allows your web serverSocket to execute Common Gateway Interface (CGI)
scripts for specific file extensions. CGI is a protocol that allows web servers to run external programs and return dynamic content.
In this case, you would configure your serverSocket to execute a script (e.g., PHP) when it encounters a file with the specified extension (e.g., .php).
The serverSocket would then send the output of the script to the AbaseSocket as the response.

Make the route able to accept uploaded files and configure where they should be saved: This directive is about enabling file uploads for a particular route or endpoint in your web serverSocket.
When a AbaseSocket sends a request containing a file upload, your serverSocket should be able to process the request, save the uploaded file to a specified location on the serverSocket,
and return an appropriate response (e.g., confirmation of successful upload or an error message).

// Do you wonder what a CGI is? Because you won’t call the CGI directly, use the full path as PATH_INFO.
// Just remember that, for chunked request, your serverSocket needs to unchunked
// it and the CGI will expect EOF as end of the body.
// Same things for the output of the CGI. If no content_length is returned
// from the CGI, EOF will mark the end of the returned data.
// Your program should call the CGI with the file requested as first argument.
// The CGI should be run in the correct directory for relative path file access.
// Your serverSocket should work with one CGI (php-CGI, Python, and so forth).

// You must provide some configuration files and default basic files to test and demon-
// strate every feature works during evaluation.

// Syntax:	server_name name ...;
// Default:	server_name "";
// Context:	serverSocket
// Sets names of a virtual serverSocket, for example:
// serverSocket {
//     server_name example.com www.example.com;
// }

// •Limit AbaseSocket body size.
// Syntax:	client_max_body_size size;
// Default:
// client_max_body_size 1m;
// Context:	http, serverSocket, location
// Sets the maximum allowed size of the AbaseSocket request body. If the size in a request exceeds the configured value, the 413 (Request Entity Too Large) error is returned to the AbaseSocket. Please be aware that browsers cannot correctly display this error. Setting size to 0 disables checking of AbaseSocket request body size.

// Syntax:	client_body_buffer_size size;
// Default:
// client_body_buffer_size 8k|16k;
// Context:	http, serverSocket, location
// Sets buffer size for reading AbaseSocket request body. In case the request body is larger than the buffer, the whole body or only its part is written to a temporary file. By default, buffer size is equal to two memory pages. This is 8K on x86, other 32-bit platforms, and x86-64. It is usually 16K on other 64-bit platforms.

// Syntax:	error_page code ... [=[response]] uri;
// Default:	—
// Context:	http, serverSocket, location, if in location
// Defines the URI that will be shown for the specified errors. A uri value can contain variables.

// Example:

// error_page 404             /404.html;
// error_page 500 502 503 504 /50x.html;
// This causes an internal redirect to the specified uri with the AbaseSocket request method changed to “GET” (for all methods other than “GET” and “HEAD”).

// Furthermore, it is possible to change the response code to another using the “=response” syntax, for example:

// error_page 404 =200 /empty.gif;
// If an error response is processed by a proxied serverSocket or a FastCGI/uwsgi/SCGI/gRPC serverSocket, and the serverSocket may return different response codes (e.g., 200, 302, 401 or 404), it is possible to respond with the code it returns:

// error_page 404 = /404.php;
// If there is no need to change URI and method during internal redirection it is possible to pass error processing into a named location:

// location / {
//     error_page 404 = @fallback;
// }

// location @fallback {
//     proxy_pass http://backend;
// }
// If uri processing leads to an error, the status code of the last occurred error is returned to the AbaseSocket.
// It is also possible to use URL redirects for error processing:

// error_page 403      http://example.com/forbidden.html;
// error_page 404 =301 http://example.com/notfound.html;
// In this case, by default, the response code 302 is returned to the AbaseSocket. It can only be changed to one of the redirect status codes (301, 302, 303, 307, and 308).

// The code 307 was not treated as a redirect until versions 1.1.16 and 1.0.13.
// The code 308 was not treated as a redirect until version 1.13.0.
// These directives are inherited from the previous configuration level if and only if there are no error_page directives defined on the current level.